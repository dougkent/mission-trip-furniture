type User
    @model(
        queries: { get: "getUser", list: "listUsers" }
        mutations: {
            create: "createUser"
            update: "updateUser"
            delete: "deleteUser"
        }
        subscriptions: null
    )
    @auth(
        rules: [
            {
                allow: owner
                ownerField: "username"
                operations: [create, update, delete]
            }
        ]
    )
    @key(
        name: "byUsername"
        fields: ["username"]
        queryField: "getUserByUsername"
    ) {
    id: ID!
    username: String!
    createdPlans: [Plan!] @connection(name: "CreatedBy")
    favoritedPlans: [Favorite!] @connection(name: "FavoritedPlans")
    downloadedPlans: [Download!] @connection(name: "DownloadedPlans")
}

type Plan
    @model
    @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
    id: ID!
    name: String!
    description: String!
    pdfS3Key: String!
    imageS3Info: S3ImageInfo!
    created: AWSDateTime!
    createdBy: User! @connection(name: "CreatedBy")
    favoritedCount: Int!
    favoritedBy: [Favorite!] @connection(name: "FavoritedBy")
    downloadedCount: Int!
    downloadedBy: [Download!] @connection(name: "DownloadedBy")
    materialsRequired: [PlanMaterial!]! @connection(name: "RequiresMaterials")
    toolsRequired: [PlanTool!]! @connection(name: "RequiresTools")
}

type Favorite
    @model(
        queries: null
        mutations: { create: "createFavorite", delete: "deleteFavorite" }
        subscriptions: null
    ) {
    id: ID!
    plan: Plan! @connection(name: "FavoritedBy")
    user: User! @connection(name: "FavoritedPlans")
}

type Download
    @model(
        queries: null
        mutations: { create: "createDownload" }
        subscriptions: null
    ) {
    id: ID!
    plan: Plan! @connection(name: "DownloadedBy")
    user: User! @connection(name: "DownloadedPlans")
}

type PlanMaterial
    @model(
        queries: null
        mutations: {
            create: "createPlanMaterial"
            delete: "deletePlanMaterial"
        }
        subscriptions: null
    )
    @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
    id: ID!
    material: Material! @connection
    plan: Plan! @connection(name: "RequiresMaterials")
}

type Material
    @model(
        queries: { list: "listMaterials" }
        mutations: null
        subscriptions: null
    ) {
    id: ID!
    name: String!
}

type PlanTool
    @model(
        queries: null
        mutations: { create: "createPlanTool", delete: "deletePlanTool" }
        subscriptions: null
    )
    @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
    id: ID!
    tool: Tool! @connection
    plan: Plan! @connection(name: "RequiresTools")
}

type Tool
    @model(
        queries: { list: "listTools" }
        mutations: null
        subscriptions: null
    ) {
    id: ID!
    name: String!
}

type S3ImageInfo {
    key: String!
    width: Int!
    height: Int!
}
